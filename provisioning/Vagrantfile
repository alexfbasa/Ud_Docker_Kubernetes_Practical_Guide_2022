# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # Configuração do nó master
  config.vm.define "master" do |master|
    master.vm.box = "ubuntu/bionic64"
    master.vm.network "forwarded_port", guest: 6443, host: 6443
    master.vm.network "forwarded_port", guest: 8080, host: 8080
    master.vm.network "private_network", type: "dhcp"
    master.vm.provider "virtualbox" do |vb|
      vb.memory = "2048"
      vb.cpus = 2
    end
    master.vm.provision "shell", inline: <<-SHELL
      # Atualiza a lista de pacotes
      sudo apt-get update

      # Cria um arquivo de configuração para containerd
      cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
      overlay
      br_netfilter
      EOF

      # Carrega os módulos necessários
      sudo modprobe overlay
      sudo modprobe br_netfilter

      # Configurações do sistema para a rede do Kubernetes
      cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF

      # Aplica as novas configurações
      sudo sysctl --system

      # Instala o containerd
      sudo apt-get update && sudo apt-get install -y containerd

      # Cria um arquivo de configuração padrão para o containerd
      sudo mkdir -p /etc/containerd
      containerd config default | sudo tee /etc/containerd/config.toml

      # Reinicia o containerd
      sudo systemctl restart containerd

      # Verifica se o containerd está em execução
      sudo systemctl status containerd

      # Desativa o swap
      sudo swapoff -a

      # Desativa o swap na inicialização
      sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

      # Instala dependências
      sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl

      # Adiciona a chave GPG do Kubernetes
      sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

      # Adiciona o Kubernetes ao repositório
      echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

      # Atualiza as listagens de pacotes
      sudo apt-get update

      # Instala os pacotes do Kubernetes
      sudo apt-get install -y kubelet=1.24.0-00 kubeadm=1.24.0-00 kubectl=1.24.0-00

      # Desabilita as atualizações automáticas
      sudo apt-mark hold kubelet kubeadm kubectl

      # Inicializa o cluster Kubernetes (apenas no nó master)
      sudo kubeadm init --pod-network-cidr=192.168.0.0/16

      # Configura o acesso kubectl
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config

      # Testa o acesso ao cluster
      kubectl get nodes
    SHELL
  end

  # Configuração dos nós de trabalho
  (1..2).each do |i|
    config.vm.define "worker#{i}" do |worker|
      worker.vm.box = "ubuntu/bionic64"
      worker.vm.network "private_network", type: "dhcp"
      worker.vm.provider "virtualbox" do |vb|
        vb.memory = "2048"
        vb.cpus = 2
      end
      worker.vm.provision "shell", inline: <<-SHELL
        # Atualiza a lista de pacotes
        sudo apt-get update

        # Cria um arquivo de configuração para containerd
        cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
        overlay
        br_netfilter
        EOF

        # Carrega os módulos necessários
        sudo modprobe overlay
        sudo modprobe br_netfilter

        # Configurações do sistema para a rede do Kubernetes
        cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        EOF

        # Aplica as novas configurações
        sudo sysctl --system

        # Instala o containerd
        sudo apt-get update && sudo apt-get install -y containerd

        # Cria um arquivo de configuração padrão para o containerd
        sudo mkdir -p /etc/containerd
        containerd config default | sudo tee /etc/containerd/config.toml

        # Reinicia o containerd
        sudo systemctl restart containerd

        # Verifica se o containerd está em execução
        sudo systemctl status containerd

        # Desativa o swap
        sudo swapoff -a

        # Desativa o swap na inicialização
        sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

        # Instala dependências
        sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl

        # Adiciona a chave GPG do Kubernetes
        sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

        # Adiciona o Kubernetes ao repositório
        echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

        # Atualiza as listagens de pacotes
        sudo apt-get update

        # Instala os pacotes do Kubernetes
        sudo apt-get install -y kubelet=1.24.0-00 kubeadm=1.24.0-00 kubectl=1.24.0-00

        # Desabilita as atualizações automáticas
        sudo apt-mark hold kubelet kubeadm kubectl

        # Junta os nós de trabalho ao cluster
        sudo kubeadm join <master-ip>:6443 --token <token> --discovery-token-ca-cert-hash sha256:<hash>

        # Aguarda alguns momentos para permitir que todos os nós estejam prontos
        sleep 120

        # Exibe o status do cluster
        kubectl get nodes
      SHELL
    end
  end
end
